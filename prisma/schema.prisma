generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Adjust to "mysql", "sqlite", etc. if needed
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  balances      Balance[]
  apiKeys       ApiKey[]
  portfolios    Portfolio[]
  kyc           KYC?
  logs          Log[]
  notifications Notification[]
  sessions      Session[]
  trades Trade[]
}

model Trade {
  id               String   @id @default(uuid())
  orderId          String   @unique
  userId           String   // FK to User.id
  market           String
  orderType        String
  price            Decimal  @db.Decimal(65, 8)
  quantity         Decimal  @db.Decimal(65, 8)
  filledQuantity   Decimal  @db.Decimal(65, 8)
  unfilledQuantity Decimal  @db.Decimal(65, 8)
  averagePrice     Decimal  @db.Decimal(65, 8)
  status           String
  timestamp        DateTime @default(now())
  postOnly         Boolean  @default(false)
  ioc              Boolean  @default(false)
  side             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}


model Balance {
  id        String   @id @default(uuid())
  userId    String
  asset     String
  available Decimal  @db.Decimal(65, 8)
  locked    Decimal  @db.Decimal(65, 8)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Portfolio {
  id        String   @id @default(uuid())
  userId    String
  market    String
  avgEntry  Decimal  @db.Decimal(65, 8)
  quantity  Decimal  @db.Decimal(65, 8)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model ApiKey {
  id        String   @id @default(uuid())
  userId    String
  key       String   @unique
  secret    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model KYC {
  id          String   @id @default(uuid())
  userId      String   @unique
  status      String   // Pending, Approved, Rejected
  fullName    String
  documentId  String
  photoURL    String
  submittedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Log {
  id        String   @id @default(uuid())
  userId    String
  action    String   // e.g., "LOGIN", "TRADE", "WITHDRAWAL"
  message   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String   // e.g., "Order Filled", "Deposit", "Security Alert"
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  ipAddress    String
  userAgent    String
  createdAt    DateTime @default(now())
  lastActivity DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
